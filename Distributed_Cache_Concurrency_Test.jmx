<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Distributed_Cache_Concurrency_Test">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">0</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/donalshijan/Workspace/PersonalProjects/Distributed_Cache/JmeterConcurrencyTestFiles/testResults.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.Socket
import java.io.PrintWriter
import java.io.BufferedReader
import java.io.InputStreamReader
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.jmeter.util.JMeterUtils
import java.util.concurrent.Executors

class ProgressBar {
    def total
    def current = 0
    def running = true
    def executor
    ProgressBar(int total) {
        this.total = total
        this.executor = Executors.newSingleThreadExecutor()  // Initialize the executor
    }

    def update(int count) {
        this.current = count
    }

    def display() {
        executor.submit {
		while (running) {
                def percent = (current / total) * 100
                def barLength = 40  // Length of the progress bar
                def filledLength = (int)(barLength * percent / 100)
                def bar = &apos;â–ˆ&apos; * filledLength + &apos;-&apos; * (barLength - filledLength)

                // Display the progress bar in logs or console
                print(&quot;\rProgress: |${bar}| ${String.format(&quot;%.2f&quot;, percent)}% Complete&quot;)
                Thread.sleep(100)
		}
        }
    }

    def stop() {
        this.running = false
        println(&quot;\nProgress complete!&quot;)

        // Properly shut down the executor and wait for termination
        executor.shutdown()
        try {
            if (!executor.awaitTermination(1, TimeUnit.SECONDS)) {
                executor.shutdownNow()  // Force shutdown if it takes too long
            }
        } catch (InterruptedException e) {
            executor.shutdownNow()
            Thread.currentThread().interrupt()
        }
    }
}

// Helper function to generate random strings
def randomString(int length) {
    def chars = &apos;abcdefghijklmnopqrstuvwxyz&apos;
    def random = new Random()
    (1..length).collect { chars[random.nextInt(chars.length())] }.join()
}

// Construct a SET message
def constructSetMessage(String key, String value) {
    return &quot;*3\r\n\\$3\r\nSET\r\n\\$${key.length()}\r\n${key}\r\n\\$${value.length()}\r\n${value}\r\n&quot;
}

// Construct a GET message
def constructGetMessage(String key) {
    return &quot;*2\r\n\\$3\r\nGET\r\n\\$${key.length()}\r\n${key}\r\n&quot;
}

// Function to send a TCP request
def sendRequest(String message, String ip, int port, int timeout) {
    Socket socket = null
    try {
        socket = new Socket(ip, port)
        socket.setSoTimeout(timeout * 1000)  // Set timeout in milliseconds

        // Send the request
        PrintWriter out = new PrintWriter(socket.getOutputStream(), true)
        out.print(message)
        out.flush()

        // Read the response
        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))
        def response = in.readLine()
        return response

    } catch (Exception e) {
        return &quot;ERROR: ${e.message}&quot;
    } finally {
        if (socket != null) socket.close()
    }
}

// Asynchronous function to handle concurrent GET requests
def concurrentGetRequests(String ip, int port, List&lt;String&gt; keys, int threads) {
    def executor = Executors.newFixedThreadPool(threads)
    def validResponses = 0
    def totalKeys = keys.size()
	ProgressBar progressBar = new ProgressBar(totalKeys)
	progressBar.display()
	// Initialize the counter
    int i = 0
    keys.each { key -&gt;
        executor.submit {
            def message = constructGetMessage(key)
            log.info(&quot;Sending message to get key ${key}: ${message}&quot;) 
            def response = sendRequest(message, ip, port, 5)
            if (response.startsWith(&quot;\\$&quot;)) { // Valid Redis response
                validResponses++
            } else if (response == &quot;TIMEOUT&quot;) {
                log.info(&quot;Request for key for key: ${key} timed out.&quot;)
            } else {
                log.info(&quot;Error for key: ${key} -&gt; ${response}&quot;)
            }    
            synchronized (this) {
                i++
                progressBar.update(i)
            }
            
        }

    }
    executor.shutdown()
    executor.awaitTermination(10, TimeUnit.MINUTES)
    Thread.sleep(200)
    progressBar.stop()
    return validResponses
}

// Function to set key-value pairs
def setKeys(String ip, int port, Map&lt;String, String&gt; keyValuePairs) {
	ProgressBar progressBar = new ProgressBar(keyValuePairs.size())	
	progressBar.display()
	// Initialize the counter
    int i = 0
    keyValuePairs.each { key, value -&gt;
        def message = constructSetMessage(key, value)
        log.info(&quot;Sending message to set key ${key}: ${message}&quot;)  // Log the message before sending the request
        def response = sendRequest(message, ip, port, 5)
        if (!response.contains(&quot;+OK&quot;)) {
            log.info(&quot;Error setting key ${key}: ${response}&quot;)
        }
        i++
        progressBar.update(i)
    }
    Thread.sleep(200)
    progressBar.stop()
}

// Main logic

// Configuration (you can parameterize these with JMeter variables)
def ip = vars.get(&quot;cache_server_ip&quot;) // Cache server IP
def port = vars.get(&quot;cache_server_port&quot;).toInteger()     // Cache server port
def basePairs = 2000   // Start with 50 key-value pairs


// Initialize valid response counter
def validResponsesCount = 0

log.info(&quot; Testing with ${basePairs} key-value pairs.&quot;)
// Generate random key-value pairs
def keyValuePairs = [:]
for (int i = 1; i &lt;= basePairs; i++) {
   def key = &quot;key${i}&quot;
   def value = randomString(6)
   keyValuePairs[key] = value
}
println(&quot;Setting ${basePairs} Keys...&quot;)
// Set the keys in the cache
setKeys(ip, port, keyValuePairs)

// Retrieve the keys
def keys = keyValuePairs.keySet().toList()
println(&quot;Running Concurrent GET Test to get ${basePairs} Keys...&quot;)
validResponsesCount = concurrentGetRequests(ip, port, keys, keys.size())

// Check if all responses were valid
if (validResponsesCount == keys.size()) {
   log.info(&quot;All ${validResponsesCount} responses were valid.&quot;)

} else {
   log.info(&quot;Received ${validResponsesCount} valid responses out of ${keys.size()}. Stopping test.&quot;)

}


// Log the final result to a file
def resultFile = new File(&apos;JmeterConcurrencyTestResults.txt&apos;)


if(validResponsesCount&gt;0){
resultFile.withWriterAppend { writer -&gt;
writer.writeLine(&quot;Server was able to handle ${validResponsesCount} out of ${keys.size()} concurrent requests using apache jmeter test.&quot;)
}	
}



log.info(&quot;Test completed.&quot;)
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/donalshijan/Workspace/PersonalProjects/Distributed_Cache/JmeterConcurrencyTestFiles/testResults.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/donalshijan/Workspace/PersonalProjects/Distributed_Cache/JmeterConcurrencyTestFiles/testResults.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.net.Socket
import java.io.PrintWriter
import java.io.BufferedReader
import java.io.InputStreamReader
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

// Log the final result to a file
def resultFile = new File(&apos;JmeterConcurrencyTestResults.txt&apos;)

// Delete the file if it already exists
if (resultFile.exists()) {
    resultFile.delete()
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
      </hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="cache_server_ip" elementType="Argument">
            <stringProp name="Argument.name">cache_server_ip</stringProp>
            <stringProp name="Argument.value">127.0.0.1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cache_server_port" elementType="Argument">
            <stringProp name="Argument.name">cache_server_port</stringProp>
            <stringProp name="Argument.value">7069</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
